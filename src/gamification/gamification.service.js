
const prisma = require('../config/prisma');
const { createAndSendNotification } = require('../notification/notification.service');


const ruleImplementations = {
    CONNECTION_COUNT: (userId, tx) => tx.connection.count({
        where: { OR: [{ userAId: userId }, { userBId: userId }] }
    }),
    DISTINCT_CHECKIN_COUNT: async (userId, tx) => {
        const checkIns = await tx.checkInHistory.findMany({
            where: { userId: userId },
            distinct: ['venueId']
        });
        return checkIns.length;
    },
    MESSAGES_COUNT_24H: async (userId, tx) => {
        const twentyFourHoursAgo = new Date(new Date() - 24 * 60 * 60 * 1000);
        const privateCount = await tx.message.count({ where: { senderId: userId, createdAt: { gte: twentyFourHoursAgo } } });
        const groupCount = await tx.venueGroupMessage.count({ where: { senderId: userId, createdAt: { gte: twentyFourHoursAgo } } });
        return privateCount + groupCount;
    },
     PROFILE_HAS_BIO: async (userId, tx) => {
        const profile = await tx.profile.findUnique({ where: { userId } });
        // ∆èg…ôr bio varsa v…ô bo≈ü deyils…ô 1 (doƒüru), …ôks halda 0 (yanlƒ±≈ü) qaytarƒ±r
        return (profile && profile.bio && profile.bio.trim() !== "") ? 1 : 0;
    },

    // Profilin ≈ü…ôkil sayƒ±
    PHOTO_COUNT: (userId, tx) => tx.photo.count({
        where: { profile: { userId: userId } }
    }),
     PROFILE_COMPLETION_PERCENTAGE: async (userId) => {
        const completionData = await getProfileCompletion(userId);
        return completionData.percentage;
    },
    // G∆èL∆èC∆èKD∆è YENƒ∞ Bƒ∞R QAYDA YAZSANIZ, SAD∆èC∆è ONU BURAYA ∆èLAV∆è ED∆èC∆èKSƒ∞Nƒ∞Z
};

// Bu funksiya g…ôl…ôc…ôkd…ô b√ºt√ºn ni≈üan yoxlamalarƒ±nƒ± idar…ô ed…ôc…ôk
const checkAndGrantBadges = async (userId, action, tx) => {
    const prismaClient = tx || prisma;
    try {
        const relevantBadges = await prismaClient.badge.findMany({
            where: { rule: { triggerAction: action } },
            include: { rule: true }
        });
        if (relevantBadges.length === 0) return;

        const userBadges = await prismaClient.userBadge.findMany({
            where: { userId: userId },
            include: { badge: { select: { code: true } } }
        });
        const userBadgeCodes = new Set(userBadges.map(ub => ub.badge.code));

        for (const badge of relevantBadges) {
            if (userBadgeCodes.has(badge.code) || !badge.rule) continue;

            const ruleFunction = ruleImplementations[badge.rule.code];
            if (!ruleFunction) continue; // ∆èg…ôr qayda √º√ß√ºn kod yazƒ±lmayƒ±bsa, √∂t√ºr

            const currentCount = await ruleFunction(userId, prismaClient);

            if (currentCount >= badge.checkValue) {
                await grantBadge(userId, badge.code, prismaClient, true);
            }
        }
    } catch (error) {
        console.error(`[GAMIFICATION_ENGINE_ERROR] ${action} √º√ß√ºn ni≈üanlar yoxlanƒ±lark…ôn x…ôta ba≈ü verdi:`, error);
    }
};

const getAllBadges = () => {
    return prisma.badge.findMany({
        orderBy: { createdAt: 'desc' }
    });
};

const createBadge = async(data) => {
    // D√úZ∆èLƒ∞≈û: Artƒ±q ruleId v…ô checkValue-nu da datadan g√∂t√ºr√ºr√ºk
    const { code, name, description, iconUrl, ruleId, checkValue } = data;
    if (ruleId) {
        const ruleExists = await prisma.badgeRule.findUnique({
            where: { id: Number(ruleId) }
        });
        if (!ruleExists) {
            const error = new Error(`Bu ID (${ruleId}) il…ô he√ß bir qayda tapƒ±lmadƒ±.`);
            error.statusCode = 400; // Bad Request
            throw error;
        }
    }
    return prisma.badge.create({
        data: { 
            code, 
            name, 
            description, 
            iconUrl, 
            // V…ô onlarƒ± databazaya yazƒ±rƒ±q.
            // Formdan g…ôl…ôn datalar string ola bil…ôc…ôyi √º√ß√ºn onlarƒ± r…ôq…ôm…ô √ßevirm…ôk daha t…ôhl√ºk…ôsizdir.
           ruleId: ruleId ? Number(ruleId) : null, 
            checkValue: checkValue ? Number(checkValue) : null 
        }
    });
};

const updateBadge = (badgeId, data) => {
    return prisma.badge.update({
        where: { id: Number(badgeId) },
        data: data
    });
};

const deleteBadge = (badgeId) => {
    return prisma.badge.delete({
        where: { id: Number(badgeId) }
    });
};

const grantBadge = async (userId, badgeCode, tx, shouldNotify = false) => {
    const prismaClient = tx || prisma;
    try {
        const existingBadge = await prismaClient.userBadge.findFirst({
            where: { userId: userId, badge: { code: badgeCode } }
        });
        if (existingBadge) return;

        const badge = await prismaClient.badge.findUnique({ where: { code: badgeCode } });
        if (badge) {
            await prismaClient.userBadge.create({
                data: { userId: userId, badgeId: badge.id }
            });

            if (shouldNotify) {
                await createAndSendNotification(
                    userId, 'NEW_BADGE_UNLOCKED',
                    `Yeni Ni≈üan qazandƒ±nƒ±z: ${badge.name}! üéâ`,
                    { badgeCode: badge.code }
                );
            }
        }
    } catch (error) {
        console.error(`[GAMIFICATION_ERROR] "${badgeCode}" ni≈üanƒ± birba≈üa veril…ôrk…ôn x…ôta ba≈ü verdi:`, error);
    }
};

// === RULE IMPLEMENTATIONS ===
const getAllBadgeRules = () => prisma.badgeRule.findMany();
const createBadgeRule = (data) => prisma.badgeRule.create({ data });
// === USER-FACING FUNCTIONS ===
const getBadgesForUser = async (userId) => {
    const userBadges = await prisma.userBadge.findMany({
        where: { userId: userId },
        include: {
            badge: true // H…ôr qazanƒ±lmƒ±≈ü ni≈üanƒ±n √∂z m…ôlumatlarƒ±nƒ± da g…ôtiririk
        },
        orderBy: {
            createdAt: 'desc'
        }
    });

    // Yalnƒ±z ni≈üan m…ôlumatlarƒ±nƒ± qaytarƒ±rƒ±q
    return userBadges.map(ub => ub.badge);
};
const getProfileCompletion = async (userId) => {
    // 1. ƒ∞stifad…ô√ßinin b√ºt√ºn lazƒ±mi m…ôlumatlarƒ±nƒ± bir sorƒüuda √ß…ôkirik
    const userProfile = await prisma.profile.findUnique({
        where: { userId },
        include: {
            photos: { select: { id: true } },
            interests: { select: { id: true } },
        }
    });

    if (!userProfile) {
        const error = new Error('Profil tapƒ±lmadƒ±.');
        error.statusCode = 404;
        throw error;
    }

    // 2. Qaydalarƒ± v…ô onlarƒ±n "√ß…ôkisini" t…ôyin edirik
    const completionCriteria = {
        hasAvatar: { weight: 20, satisfied: userProfile.photos.length > 0 },
        hasBio: { weight: 20, satisfied: !!userProfile.bio && userProfile.bio.trim() !== "" },
        hasThreeInterests: { weight: 20, satisfied: userProfile.interests.length >= 3 },
        hasFourPhotos: { weight: 20, satisfied: userProfile.photos.length >= 4 },
        isVerified: { weight: 20, satisfied: userProfile.isVerified },
    };

    // 3. √úmumi faizi v…ô √ßatƒ±≈ümayan hiss…ôl…ôri hesablayƒ±rƒ±q
    let totalPercentage = 0;
    const missingParts = [];

    for (const key in completionCriteria) {
        if (completionCriteria[key].satisfied) {
            totalPercentage += completionCriteria[key].weight;
        } else {
            missingParts.push(key); // M…ôs: ['hasBio', 'isVerified']
        }
    }
    return {
        percentage: totalPercentage,
        missing: missingParts,
        suggestions: {
            hasAvatar: "Profilin…ô ilk ≈ü…ôklini …ôlav…ô et.",
            hasBio: "Bio (Haqqƒ±nda) b√∂lm…ôsini dolduraraq √∂z√ºn√º tanƒ±t.",
            hasThreeInterests: "∆èn azƒ± 3 maraq sah…ôsi se√ß.",
            hasFourPhotos: "Daha √ßox diqq…ôt √ß…ôkm…ôk √º√ß√ºn …ôn az 4 ≈ü…ôkil y√ºkl…ô.",
            isVerified: "Profilini t…ôsdiql…ôd…ôr…ôk g√ºv…ôn qazan.",
        }
    };
};
module.exports = {
    checkAndGrantBadges,
    getAllBadges,
    createBadge,
    updateBadge,
    deleteBadge,
    getBadgesForUser,grantBadge,
    getAllBadgeRules,
    createBadgeRule,getProfileCompletion

};