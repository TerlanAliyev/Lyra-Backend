
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
}
enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}
enum PersonalityType {
  INTROVERT
  EXTROVERT
  AMBIVERT
}
enum SubscriptionPlan {
  FREE
  PREMIUM_MONTHLY
  PREMIUM_YEARLY
}
enum VenueCategory {
  GENERAL
  CAFE
  RESTAURANT
  UNIVERSITY
  BAR
  EVENT_SPACE
  CLUB 
}
enum IcebreakerCategory {
  GENERAL     // Hər növ məkana uyğun ümumi suallar
  FOOD_DRINK  // Kafe və restoranlar üçün
  STUDENT_LIFE // Universitetlər üçün
  NIGHTLIFE   // Barlar və gecə klubları üçün
  DEEP_TALK   // Dərin söhbətlər üçün
}
enum VerificationStatus {
  NOT_SUBMITTED
  PENDING
  APPROVED
  REJECTED
}
enum ChallengeInstanceStatus {
  PENDING   // Təklif göndərilib, cavab gözləyir
  ACCEPTED  // Təklif qəbul edilib
  DECLINED  // Təklif rədd edilib
  COMPLETED // Uğurla tamamlanıb
  EXPIRED   // Vaxtı keçib
}
enum OptionType {
  SEXUAL_ORIENTATION
  RELATIONSHIP_GOAL
}
model ProfileOption {
  id    Int        @id @default(autoincrement())
  type  OptionType // Bu seçimin hansı qrupa aid olduğunu göstərir
  code  String     @unique // Məs: HETEROSEXUAL, RELATIONSHIP
  name  String     // Frontend-də görünəcək ad, Məs: "Heteroseksual"

  // Bu seçimi istifadə edən profillərlə əlaqələr
  profilesByOrientation Profile[] @relation("ProfileToSexualOrientation")
  profilesByGoal      Profile[] @relation("ProfileToRelationshipGoal")
}
model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String?
  authProvider    AuthProvider    @default(EMAIL)
  googleId        String?         @unique
  appleId         String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  profile         Profile?
  activeSession   ActiveSession?
  sentSignals     Signal[]        @relation("SentSignals")
  receivedSignals Signal[]        @relation("ReceivedSignals")
  connectionsA    Connection[]    @relation("UserAConnections")
  connectionsB    Connection[]    @relation("UserBConnections")
  messages        Message[]       @relation("SentMessages")
  blockedBy       Block[]         @relation("BlockedUsers")
  blocking        Block[]         @relation("BlockingUsers")
  reportsMade          Report[]               @relation("reports_made")
  reportsReceived      Report[]               @relation("reports_received")
  devices         Device[]
  notifications   Notification[]
  feedbacks Feedback[]
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @default(1) 
  isActive Boolean @default(true)

  subscription         SubscriptionPlan @default(FREE)
  subscriptionExpiresAt DateTime?
  premiumExpiresAt      DateTime?
  
  auditLogs   AuditLog[] // YENİ ƏLAQƏ
  sentBroadcasts BroadcastNotification[]
  passwordResetTokens PasswordResetToken[] // YENİ ƏLAVƏ
  viewsMade     ProfileView[] @relation("views_made")
  viewsReceived ProfileView[] @relation("views_received")
  venueGroupMessages VenueGroupMessage[]
  accountDeletionToken AccountDeletionToken?
  emailChangeToken EmailChangeToken?
  refreshTokens RefreshToken[]
  groupMessageReactions GroupMessageReaction[] // Bu sətri əlavə edin
  checkInHistory CheckInHistory[]
  badges UserBadge[] // YENİ ƏLAQƏ

  sentChallenges     ChallengeInstance[] @relation("SentChallenges")
  receivedChallenges ChallengeInstance[] @relation("ReceivedChallenges")
}

model Profile {
  id          String           @id @default(uuid())
  name        String
  age         Int
  gender      String
  bio         String?
  university  String?
  city        String?
  personality PersonalityType?
  user        User             @relation(fields: [userId], references: [id])
  userId      String           @unique
  interests   Interest[]       @relation("ProfileInterests")
  photos      Photo[]
  phoneNumber   String?          @unique
  extraSignalCredits Int     @default(0) // YENİ SAHƏ: Mükafatlı siqnal kreditləri
  hideViewFootprints   Boolean   @default(false) 
  preferredMinAge      Int?
  preferredMaxAge      Int?
  notifyOnNewSignal    Boolean @default(true)
  notifyOnNewMatch     Boolean @default(true)
  notifyOnNewMessage   Boolean @default(true)
  isVerified           Boolean              @default(false)
  verificationStatus   VerificationStatus   @default(NOT_SUBMITTED)
  verificationPhotoUrl String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime?          
  provisionalSignalsUsed Int                  @default(0)
  currentStatus        String?
  statusExpiresAt      DateTime?
sexualOrientation   ProfileOption? @relation("ProfileToSexualOrientation", fields: [sexualOrientationId], references: [id])
  sexualOrientationId Int?

  relationshipGoal      ProfileOption? @relation("ProfileToRelationshipGoal", fields: [relationshipGoalId], references: [id])
  relationshipGoalId    Int?
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  interests Interest[]
}

model Interest {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  profiles   Profile[]  @relation("ProfileInterests")
}

model Venue {
  id             Int             @id @default(autoincrement())
  name           String
  address        String?
  description String?  // Məkan haqqında ətraflı məlumat (opsional)
  latitude       Float
  longitude      Float
  isActive   Boolean  @default(true)    // Məkanın aktiv/deaktiv olması
  isFeatured Boolean  @default(false)   // Məkanın "Featured" olması
  activeSessions ActiveSession[]
  groupMessages VenueGroupMessage[]
  category     VenueCategory @default(GENERAL) // YENİ SAHƏ
  statsSummary Json? 
  checkInHistory CheckInHistory[]
  challenges ChallengeInstance[]

}

model ActiveSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  isIncognito Boolean  @default(false) // YENİ SAHƏ
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   Int
}

model Signal {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("SentSignals", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedSignals", fields: [receiverId], references: [id])
  receiverId String

  @@unique([senderId, receiverId])
}

model Connection {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userA     User      @relation("UserAConnections", fields: [userAId], references: [id])
  userAId   String
  userB     User      @relation("UserBConnections", fields: [userBId], references: [id])
  userBId   String
  messages  Message[]
  challenges ChallengeInstance[]

  @@unique([userAId, userBId])
}

model Message {
  id           Int        @id @default(autoincrement())
  content      String?
  imageUrl  String?  
  audioUrl  String?
  createdAt    DateTime   @default(now())
  sender       User       @relation("SentMessages", fields: [senderId], references: [id])
  senderId     String
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId Int
  reports Report[]
  isRead    Boolean  @default(false)
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlockingUsers", fields: [blockerId], references: [id])
  blockerId String
  blocked   User     @relation("BlockedUsers", fields: [blockedId], references: [id])
  blockedId String

  @@unique([blockerId, blockedId])
}

model Report {
  id        Int      @id @default(autoincrement())
  reason    String
  status    ReportStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reporterId String
  reporter   User     @relation("reports_made", fields: [reporterId], references: [id], onDelete: Cascade)

  reportedUserId String
  reportedUser   User     @relation("reports_received", fields: [reportedUserId], references: [id], onDelete: Cascade)

  reportedMessageId    Int?
  reportedMessage      Message? @relation(fields: [reportedMessageId], references: [id], onDelete: SetNull)

  reportedGroupMessageId Int?
  reportedGroupMessage   VenueGroupMessage? @relation(fields: [reportedGroupMessageId], references: [id], onDelete: SetNull)
}

model Device {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
model Feedback {
  id            Int      @id @default(autoincrement())
  description   String
  screenshotUrl String?  // Ekran görüntüsü üçün URL (opsional)
  createdAt     DateTime @default(now())

  // Əlaqələr
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String   // Rəyi göndərən istifadəçi
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  actor       User?    @relation(fields: [actorId], references: [id], onDelete: SetNull) // Hərəkəti edən şəxs (admin və ya istifadəçi)
  actorId     String?
  action      String   // Məs: 'USER_ACTIVATED_INCOGNITO'
  details     Json?    // Əlavə məlumatlar
  createdAt   DateTime @default(now())
}

model BroadcastNotification {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())

  // Əlaqələr
  sentBy    User     @relation(fields: [sentById], references: [id])
  sentById  String   // Bildirişi göndərən admin
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique // 6 rəqəmli OTP kodu
  expiresAt DateTime // Son istifadə tarixi (məs. 10 dəqiqə sonra)
  createdAt DateTime @default(now())

  // Əlaqələr
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  isAvatar  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
}
model IcebreakerQuestion {
  id        Int      @id @default(autoincrement())
  text      String   @unique
  category  IcebreakerCategory @default(GENERAL) // YENİ SAHƏ
  createdAt DateTime @default(now())
}

model ProfileView {
  id        Int      @id @default(autoincrement())
  viewerId  String
  viewedId  String
  createdAt DateTime @default(now())

  viewer User @relation("views_made", fields: [viewerId], references: [id], onDelete: Cascade)
  viewed User @relation("views_received", fields: [viewedId], references: [id], onDelete: Cascade)

  @@unique([viewerId, viewedId]) // Bir istifadəçinin digərinə baxışını təkrarlamamaq üçün
}

model VenueGroupMessage {
  id        Int      @id @default(autoincrement())
  content   String?
  imageUrl  String?  // YENİ SAHƏ
  audioUrl  String?  // YENİ SAHƏ
  videoUrl  String?  // YENİ SAHƏ
  createdAt DateTime @default(now())
  reports Report[]
  reactions GroupMessageReaction[] // Bu sətri əlavə edin

  venueId   Int
  senderId  String

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  sender    User  @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model AccountDeletionToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailChangeToken {
  id        Int      @id @default(autoincrement()) // DÜZƏLİŞ BURADADIR
  token     String   @unique
  newEmail  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model RefreshToken {
  id        Int      @id @default(autoincrement())
  
  // DƏYİŞİKLİK 1: Sahənin üzərindən @unique atributunu silirik
  token     String   @db.Text 

  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  // DƏYİŞİKLİK 2: Unikallığı burada, indeks olaraq təyin edirik
  @@unique([token(length: 255)])
}

model GroupMessageReaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  createdAt DateTime @default(now())

  messageId Int
  message   VenueGroupMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji]) // Bir istifadəçinin eyni mesaja eyni emojini bir dəfə əlavə edə bilməsini təmin edir
}

model CheckInHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
}

model Badge {
  id          Int        @id @default(autoincrement())
  code        String     @unique // 'SOCIAL_BUTTERFLY_1', 'EXPLORER_1'
  name        String
  description String
  iconUrl     String
  rule        BadgeRule? @relation(fields: [ruleId], references: [id])
  ruleId      Int?       // Hansı qaydaya bağlıdır?
  checkValue  Int?       // Hədəf rəqəm neçə olmalıdır?
  users       UserBadge[]
  createdAt   DateTime   @default(now())
}

model UserBadge {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId   Int
  createdAt DateTime @default(now())

  @@id([userId, badgeId]) // Birləşmiş unikal açar
}

model BadgeRule {
  id            Int      @id @default(autoincrement())
  code          String   @unique // Məs: 'CONNECTION_COUNT', 'DISTINCT_CHECKIN_COUNT'
  name          String   // Məs: 'Bağlantı Sayı', 'Fərqli Məkan Sayı'
  description   String   // Admin üçün izah
  triggerAction String   // Hansı hadisənin bu yoxlamanı başladacağını göstərən sadə mətn (məs: 'NEW_MATCH')
  badges        Badge[]
}

model ChallengeTemplate {
    id          Int      @id @default(autoincrement()) 
  name        String
  description String   // Məs: "Gəl, birlikdə kofe içib söhbət edək."
  iconUrl     String?
  isActive    Boolean  @default(true) // Admin bu təklif növünü deaktiv edə bilər

  instances   ChallengeInstance[]

  createdAt   DateTime @default(now())
}

model ChallengeInstance {
  id            Int      @id @default(autoincrement())
  status        ChallengeInstanceStatus @default(PENDING)
  challengeTime DateTime
  
  // Hansı şablona əsaslandığı
  template      ChallengeTemplate     @relation(fields: [templateId], references: [id])
  templateId    Int

  // Tərəflər
  challenger    User     @relation("SentChallenges", fields: [challengerId], references: [id], onDelete: Cascade)
  challengerId  String
  challenged    User     @relation("ReceivedChallenges", fields: [challengedId], references: [id], onDelete: Cascade)
  challengedId  String

  // Hansı "match"-ə aid olduğu
  connection    Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId  Int

  // Hansı məkanda görüş təyin edildiyi
  venue         Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId       Int

  challengerCheckedIn Boolean @default(false)
  challengedCheckedIn Boolean @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
