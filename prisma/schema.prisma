
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
}
enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}
enum PersonalityType {
  INTROVERT
  EXTROVERT
  AMBIVERT
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String?
  authProvider    AuthProvider    @default(EMAIL)
  googleId        String?         @unique
  appleId         String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  profile         Profile?
  activeSession   ActiveSession?
  sentSignals     Signal[]        @relation("SentSignals")
  receivedSignals Signal[]        @relation("ReceivedSignals")
  connectionsA    Connection[]    @relation("UserAConnections")
  connectionsB    Connection[]    @relation("UserBConnections")
  messages        Message[]       @relation("SentMessages")
  blockedBy       Block[]         @relation("BlockedUsers")
  blocking        Block[]         @relation("BlockingUsers")
  reportsMade     Report[]        @relation("ReportingUsers")
  reportedBy      Report[]        @relation("ReportedUsers")
  devices         Device[]
  notifications   Notification[]
  feedbacks Feedback[]
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @default(2) 
  isActive Boolean @default(true)
  adminLogs   AdminLog[]
  sentBroadcasts BroadcastNotification[]
  checkInHistory CheckInHistory[] // YENİ ƏLAVƏ
  passwordResetTokens PasswordResetToken[] // YENİ ƏLAVƏ

}

model Profile {
  id          String           @id @default(uuid())
  name        String
  age         Int
  gender      String
  bio         String?
  university  String?
  city        String?
  personality PersonalityType?
  user        User             @relation(fields: [userId], references: [id])
  userId      String           @unique
  interests   Interest[]       @relation("ProfileInterests")
  photos      Photo[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  interests Interest[]
}

model Interest {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  profiles   Profile[]  @relation("ProfileInterests")
}

model Venue {
  id             Int             @id @default(autoincrement())
  name           String
  address        String?
    description String?  // Məkan haqqında ətraflı məlumat (opsional)
  latitude       Float
  longitude      Float
  isActive   Boolean  @default(true)    // Məkanın aktiv/deaktiv olması
  isFeatured Boolean  @default(false)   // Məkanın "Featured" olması

  activeSessions ActiveSession[]
    checkInHistory CheckInHistory[] // YENİ ƏLAVƏ

}

model ActiveSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   Int
}

model Signal {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("SentSignals", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedSignals", fields: [receiverId], references: [id])
  receiverId String

  @@unique([senderId, receiverId])
}

model Connection {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userA     User      @relation("UserAConnections", fields: [userAId], references: [id])
  userAId   String
  userB     User      @relation("UserBConnections", fields: [userBId], references: [id])
  userBId   String
  messages  Message[]

  @@unique([userAId, userBId])
}

model Message {
  id           Int        @id @default(autoincrement())
  content      String
  createdAt    DateTime   @default(now())
  sender       User       @relation("SentMessages", fields: [senderId], references: [id])
  senderId     String
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId Int
    reports Report[]
 isRead    Boolean  @default(false)
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlockingUsers", fields: [blockerId], references: [id])
  blockerId String
  blocked   User     @relation("BlockedUsers", fields: [blockedId], references: [id])
  blockedId String

  @@unique([blockerId, blockedId])
}

model Report {
  id          Int      @id @default(autoincrement())
  reason      String
  createdAt   DateTime @default(now())
  status      ReportStatus @default(PENDING)

  reporter    User     @relation("ReportingUsers", fields: [reporterId], references: [id])
  reporterId  String

  // DƏYİŞİKLİK: Artıq şikayət ya bir istifadəçi, ya da bir mesaj haqqında ola bilər
  reportedUser    User?     @relation("ReportedUsers", fields: [reportedUserId], references: [id])
  reportedUserId  String?

  reportedMessage Message? @relation(fields: [reportedMessageId], references: [id], onDelete: Cascade)
  reportedMessageId Int?
}

model Device {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
model Feedback {
  id            Int      @id @default(autoincrement())
  description   String
  screenshotUrl String?  // Ekran görüntüsü üçün URL (opsional)
  createdAt     DateTime @default(now())

  // Əlaqələr
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String   // Rəyi göndərən istifadəçi
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model AdminLog {
  id        Int      @id @default(autoincrement())
  action    String   // Edilən hərəkət (məs: "USER_BANNED", "VENUE_CREATED")
  details   Json?    // Hərəkət haqqında əlavə məlumat (məs: { oldStatus: true, newStatus: false })
  createdAt DateTime @default(now())

  // Əlaqələr
  admin     User     @relation(fields: [adminId], references: [id])
  adminId   String   // Hərəkəti edən admin
}

model BroadcastNotification {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())

  // Əlaqələr
  sentBy    User     @relation(fields: [sentById], references: [id])
  sentById  String   // Bildirişi göndərən admin
}

model CheckInHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   Int

  @@index([userId])
  @@index([venueId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique // 6 rəqəmli OTP kodu
  expiresAt DateTime // Son istifadə tarixi (məs. 10 dəqiqə sonra)
  createdAt DateTime @default(now())

  // Əlaqələr
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  isAvatar  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
}
